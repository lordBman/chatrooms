// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  username      String      @unique
  password      String
  rooms         Room[]
  comments      Comment[]
  members       Members[]
  session       Session?
  profile       Profile?
  commentLikes  CommentLikes[]
  roomLikes     RoomLikes[]
}

model Session{
  id          String      @unique
  userID      Int         @unique
  user        User        @relation(fields: [userID], references: [id])
}

model Profile{
  userID      Int         @unique
  user        User        @relation(fields: [userID], references: [id])

  name        String?
  surname     String?
  description String?
  path        String?
}

model Post {
  id                Int           @id @default(autoincrement())
  message           String
  posted            DateTime      @default(now())
  isPrivate         Boolean       @default(false)
}

model Room {
  id                Int           @id @default(autoincrement())
  title             String
  creator           User          @relation(fields: [creatorID], references: [id])  
  creatorID         Int
  isPrivate         Boolean       @default(false)
  posted            DateTime      @default(now())
  lastCommented     DateTime      @default(now())
  attachment        String?
  
  comments          Comment[]
  members           Members[]
  tags              Tag[]
  likes             RoomLikes[]
}

model RoomLikes{
  user        User            @relation(fields: [userID], references: [id])  
  userID      Int
  room        Room            @relation(fields: [roomID], references: [id])  
  roomID      Int
  like        Boolean

  @@id([userID, roomID])
}

model Tag{
  slurg       String
  name        String
  
  roomID      Int
  room        Room            @relation(fields: [roomID], references: [id])

  @@id([slurg, roomID])
}

model Members{
  user        User            @relation(fields: [userID], references: [id])  
  userID      Int
  room        Room            @relation(fields: [roomID], references: [id])  
  roomID      Int

  @@id([userID, roomID])
}

model Comment {
  id          Int             @id @default(autoincrement())
  message     String
  user        User            @relation(fields: [userID], references: [id])
  userID      Int
  room        Room            @relation(fields: [roomID], references: [id])
  roomID      Int
  attachment  String?
  posted      DateTime        @default(now())
  likes       CommentLikes[]

  reply       Comment[]       @relation("reference")
  referenceID Int?
  reference   Comment?        @relation("reference", fields: [referenceID], references: [id])
}

model CommentLikes{
  user        User            @relation(fields: [userID], references: [id])  
  userID      Int
  comment     Comment         @relation(fields: [commentID], references: [id])  
  commentID   Int
  like        Boolean

  @@id([userID, commentID])
}
