// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                Int            @id @default(autoincrement())
  username          String
  email             String
  password          String
  session           Session?
  profile           Profile?

  posts             Post[]
  rooms             Room[]
  chats             Chat[]
  members           Members[]
  comments          Comment[]
  commentLikes      CommentLikes[]
  postLikes         PostLikes[]
}

model Profile{
  userID            Int           @unique
  user              User          @relation(fields: [userID], references: [id])

  name              String?
  surname           String?
  description       String?
  path              String?
}

model Session{
  id                String        @unique
  userID            Int           @unique
  user              User          @relation(fields: [userID], references: [id])
}

model Post {
  id                Int           @id @default(autoincrement())
  content           String
  userID            Int
  roomID            Int?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  user              User          @relation(fields: [userID], references: [id])
  room              Room?         @relation(fields: [roomID], references: [id])
  tags              Tag[]
  comments          Comment[]
  likes             PostLikes[]
}

model Tag{
  slurg             String
  name              String
  
  postID            Int
  post              Post          @relation(fields: [postID], references: [id])

  @@id([slurg, postID])
}

model PostLikes{
  user              User          @relation(fields: [userID], references: [id])  
  userID            Int
  post              Post       @relation(fields: [postID], references: [id])  
  postID            Int
  like              Boolean

  @@id([userID, postID])
}

model Comment {
  id                Int           @id @default(autoincrement())
  message           String
  user              User          @relation(fields: [userID], references: [id])
  userID            Int
  post              Post          @relation(fields: [postID], references: [id])
  postID            Int
  attachment        String?
  posted            DateTime      @default(now())
  likes             CommentLikes[]

  reply             Comment[]     @relation("reference")
  referenceID       Int?
  reference         Comment?      @relation("reference", fields: [referenceID], references: [id])
}

model CommentLikes{
  user              User          @relation(fields: [userID], references: [id])  
  userID            Int
  comment           Comment       @relation(fields: [commentID], references: [id])  
  commentID         Int
  like              Boolean

  @@id([userID, commentID])
}

model Members{
  user              User           @relation(fields: [userID], references: [id])  
  userID            Int
  room              Room           @relation(fields: [roomID], references: [id])  
  roomID            Int

  @@id([userID, roomID])
}

model Room {
  id                Int            @id @default(autoincrement())
  name              String
  isPrivate         Boolean        @default(false)
  lastCommented     DateTime       @default(now())
  attachment        String?

  creatorID         Int
  creator           User           @relation(fields: [creatorID], references: [id])

  posts             Post[]
  chats             Chat[]
  members           Members[]
}

model Chat {
  id                Int            @id @default(autoincrement())
  message           String
  userID            Int
  roomID            Int
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  user              User           @relation(fields: [userID], references: [id])
  room              Room           @relation(fields: [roomID], references: [id])

  reply             Chat[]         @relation("reference")
  referenceID       Int?
  reference         Chat?          @relation("reference", fields: [referenceID], references: [id])
}